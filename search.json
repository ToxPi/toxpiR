[{"path":"https://toxpi.github.io/toxpiR/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing issues","title":"NA","text":"Please read points carefully follow filing issues. One issue one purpose. Don’t add one bug, feature request, documentation request issue. Take time read current issues ensure issue already listed. ’ve found bug, thank reporting! Please include reproducible example bug issue. need support general question, please consider asking question StackOverflow bugs labeled “bug” feature requests suggestions labeled “enhancement” questions requests support labeled “question”","code":""},{"path":"https://toxpi.github.io/toxpiR/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull Requests","title":"NA","text":"Please file issue creating PRs can discussed first invest time implementing . Please create pull requests (PR) master branch. Create one PR per feature/bug fix. PR associated Issue. Create branch feature/bug fix, named ‘issue-N’ N Issue number, use base pull requests. Pull requests directly version master accepted. Please squash temporary stage commits together issuing PR. commit messages two components: (1) headerer first line beginning “issue-N:” containing 50 characters, (2) body 1 empty line header least sentence two commit body detailing changes justifications. Lines commit body wrapped 72 characters per line, can contain multiple paragraphs.1 pull request’s description, please state clearly PR , .e., FR bug PR addresses, along issue number. e.g, “Closes #717: tcplLoadData longer errors missing data.” Please build test package using R CMD check ---cran branch source package archive .tar.gz file. may want add ---manual, ---build-vignettes --ignore-vignettes (R 3.3.0+) options reduce dependencies required perform check. PRs fail check merged. NEWS file also updated fixing implementing issue. mention issue number issue closed. Also add “Thanks @your_name PR”. References: sure issue PR, like contribute, links help get started: Github: Fork, Branch, Track, Squash Pull request. Squashing Github pull requests single commit. guide modified contributing guide data.table repository 1: make easier count characters per line can edit HOME/.vimrc(HOME/_vimrc Windows) include “:set ruler” display line position numbers bottom right corner terminal editing commit messages.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://toxpi.github.io/toxpiR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"toxpiR Introduction","text":"document describes use toxpiR package easily import, recombine, analyze high dimensional data. Users can also plot subsets data using built-plotting functions visualizing highlighting ToxPi results.","code":""},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"what-is-toxpir","dir":"Articles","previous_headings":"","what":"What is toxpiR?","title":"toxpiR Introduction","text":"Toxicological Priority Index (ToxPi) decision support tool allows transparent integration visualization data across disparate information domains aid prioritization. toxpiR system transforming data visual profiles calculating toxpi scores R. provide data, tell toxpiR integrate information, transformation functions use, takes care details. toxpiR designed enable exploration data flexible input formats, compatible input/output ToxPi GUI behaves nearly identically GUI.","code":""},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"toxpiR Introduction","text":"three main steps using package: Loading data: Users can load comma-separated value (csv) formatted data slices stored columns attributes rows. package also function load data formatted one GUI layouts slice information presented rows beginning hash tag(#). Creating ToxPi Model: ToxPi model can created specifying information slice corresponding weights. Computing ToxPi Scores: Scores can computed per attribute well slice. S4 object resulting step combine store ToxPi model scores one place. final object contain information needed plotting. Data contained within different slots S4 objects created using package can obtained using accessor functions. details can done present later document.","code":""},{"path":[]},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"standard-installation","dir":"Articles","previous_headings":"Installation","what":"Standard installation","title":"toxpiR Introduction","text":"can install toxpiR CRAN :","code":"install.packages(\"toxpiR\")"},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"installation-from-github","dir":"Articles","previous_headings":"Installation","what":"Installation from GitHub","title":"toxpiR Introduction","text":"attempting direct installation GitHub, please make sure devtools package system. Note, Windows users need Rtools install directly GitHub.","code":"remotes::install_github(\"ToxPi/toxpiR\")"},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"launching-package-in-r","dir":"Articles","previous_headings":"","what":"Launching package in R","title":"toxpiR Introduction","text":"","code":"library(toxpiR)"},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"flowchart","dir":"Articles","previous_headings":"","what":"Flowchart","title":"toxpiR Introduction","text":"flowchart details basic steps necessary analyze data using toxpiR. separate vignette describes load work GUI data file using txpImportGui() function. Usage functions described using example data set. view list functions available package, please run: lsf.str(“package:toxpiR”)","code":""},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example usage","title":"toxpiR Introduction","text":"Data can either entered regular csv file without header lines specifying slice information, one GUI input formats. example data set following GUI input guidelines may look like:  GUI data format, row beginning hash tag (#) specifies slice. slice, first column contain string beginning hash tag followed slice name, weight, color scaling, separated exclamation points (!). column non-empty string indicate corresponding metric included slice, e.g. Slice contains metric1 Slice C contains metric1 metric4 example . flat file simply begin row 6, without lines specifying slice information. simple example data set called txp_example_input available within package. use 10 x 8 toy data walk different functions available package.","code":""},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"load-the-dataset","dir":"Articles","previous_headings":"Example usage","what":"Load the dataset","title":"toxpiR Introduction","text":"","code":"data(txp_example_input, package = \"toxpiR\") head(txp_example_input) #>     name metric1 metric2 metric3 metric4 metric5 metric6 metric7 metric8 #> 1 chem01      74      77      25      74      77      97      25      77 #> 2 chem02      28      20      72      28      20      68      72      20 #> 3 chem03      61       3      73      61       3      24      73       3 #> 4 chem04      NA      40      20      NA      40      22      20      40 #> 5 chem05      29      53      44      29      53       4      44      53 #> 6 chem06      12      43      83      12      43      85      83      43"},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"specify-slice-information","dir":"Articles","previous_headings":"Example usage","what":"Specify slice information","title":"toxpiR Introduction","text":"first step specify information slice creating Toxpi model. can done using TxpSliceList() TxpSlice() functions.","code":""},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"txpslicetxpvaluenames-txptransfuncs","dir":"Articles","previous_headings":"Example usage > Specify slice information","what":"TxpSlice(txpValueNames, txpTransFuncs)","title":"toxpiR Introduction","text":"Store individual slice objects. Arguments txpValueNames : character vector indicating data include slice. Can just name single column slice contains. txpTransFuncs : List transformation functions use one function per entry txpValueNames. Can created using TxpTransFuncList() method. Defaults NULL.","code":""},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"txpslicelist","dir":"Articles","previous_headings":"Example usage > Specify slice information","what":"TxpSliceList()","title":"toxpiR Introduction","text":"Method merge individuals slices together assign slice names. Basic Usage","code":"## Goal - Create two slices with transformation functions  # Slice 1: Metric 1, No transformation  # Slice 2: Metric 2 (square) and Metric 3 (no transformation)  slice2.trans <- TxpTransFuncList(func1 = function(x) x^2, func2 = NULL)  f.slices <- TxpSliceList(Slice1 = TxpSlice(\"metric1\"),                           Slice2 = TxpSlice(c(\"metric2\", \"metric3\"),                                             txpTransFuncs = slice2.trans ))"},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"create-toxpi-model","dir":"Articles","previous_headings":"Example usage","what":"Create ToxPi model","title":"toxpiR Introduction","text":"Method store ToxPi model objects. object needed order calculate ToxPi scores. Transformation functions can specified input data level (shown ), model level (example 0 t0 1 transformation final slice value).","code":""},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"txpmodel","dir":"Articles","previous_headings":"Example usage > Create ToxPi model","what":"TxpModel()","title":"toxpiR Introduction","text":"Arguments txpSlices : TxpSliceList() object. txpWeights : numeric vector specifying weight slice. default, slices weighted equally (1). txpTransFuncs : TxpTransFuncList object. Defaults NULL, list provided, length must equal number slices present. adjusted : Scalar logical adjust returned weights sum 1. Usage","code":"## Goal - Create ToxPi model. # Slice 1, weight = 2 # Slice 2, weight = 1, apply log transform to final value.   # Object storing list of transformation functions. final.trans <- TxpTransFuncList(f1 = NULL, f2 = function(x) log10(x))   f.model <- TxpModel(txpSlices = f.slices,                      txpWeights = c(2,1),                     txpTransFuncs = final.trans)"},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"calculate-toxpi-scores","dir":"Articles","previous_headings":"Example usage","what":"Calculate ToxPi scores","title":"toxpiR Introduction","text":"Calculate ToxPi Scores given ToxPi model input data","code":""},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"txpcalculatescores","dir":"Articles","previous_headings":"Example usage > Calculate ToxPi scores","what":"txpCalculateScores()","title":"toxpiR Introduction","text":"Arguments model : ToxPi model object created using TxpModel() function. input : dataframe containing input data ToxPi model. id.var : Character scalar, column ‘input’ store . Deafults NULL. rank.ties.method : character string specifying ties treated. Available options “average”, “first”, “last”, “random”, “max” “min”. Pased base::rank function. Usage","code":"f.results <- txpCalculateScores(model = f.model,                                  input = txp_example_input,                                 id.var = 'name' )   txpSliceScores(f.results) #ToxPi scores #>          Slice1    Slice2 #>  [1,] 0.6666667 0.3200390 #>  [2,] 0.1720430 0.1307208 #>  [3,] 0.5268817 0.0000000 #>  [4,] 0.0000000 0.2228243 #>  [5,] 0.1827957 0.2650928 #>  [6,] 0.0000000 0.2359788 #>  [7,] 0.1827957 0.0000000 #>  [8,] 0.4946237 0.2978895 #>  [9,] 0.4193548 0.3333333 #> [10,] 0.5161290 0.2233755 txpWeights(f.results) #Print weights #> [1] 2 1"},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"plotting","dir":"Articles","previous_headings":"Example usage","what":"Plotting","title":"toxpiR Introduction","text":"Basic ToxPi visuals rank plots can created using plot() function. Ranks calculated highest ToxPi score rank 1. Advanced grid graphics can implemented using pieGrob objects compatible grid system.","code":"library(grid) # Load library plot(f.results) # ToxPi visuals # grid.ls() #List grid info  # Highlight one figure using its label grid.edit(\"pie-1\", fills = c(\"red\", \"black\")) # Or just one slice in a figure grid.edit(\"pie-10::slice1\", gp = gpar(fill = \"#7DBC3D\")) # Rank plot plot(f.results, y = txpRanks(f.results), labels = 1:10) # Hierarchical Clustering  f.hc <- hclust(dist(txpSliceScores(f.results)))  plot(f.hc, hang = -1, labels = txpIDs(f.results), xlab = '', sub = '')"},{"path":"https://toxpi.github.io/toxpiR/articles/introduction.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"toxpiR Introduction","text":"cite toxpiR work, please use:","code":""},{"path":"https://toxpi.github.io/toxpiR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dayne L Filer. Author, maintainer. Dillon T Lloyd. Author. Preethi Thunga. Author. Skylar W Marvel. Author. David M Reif. Author.","code":""},{"path":"https://toxpi.github.io/toxpiR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Filer D, Lloyd D, Thunga P, Marvel S, Reif D (2022). toxpiR: Create ToxPi Prioritization Models. https://github.com/ToxPi/toxpiR, https://toxpi.github.io/toxpiR/.","code":"@Manual{,   title = {toxpiR: Create ToxPi Prioritization Models},   author = {Dayne L Filer and Dillon T Lloyd and Preethi Thunga and Skylar W Marvel and David M Reif},   year = {2022},   note = {https://github.com/ToxPi/toxpiR, https://toxpi.github.io/toxpiR/}, }"},{"path":"https://toxpi.github.io/toxpiR/index.html","id":"toxpir-","dir":"","previous_headings":"","what":"Create ToxPi Prioritization Models","title":"Create ToxPi Prioritization Models","text":"R package Toxicological Priority Index (ToxPi) prioritization algorithm. Package developed maintained Reif Lab.","code":""},{"path":"https://toxpi.github.io/toxpiR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create ToxPi Prioritization Models","text":"Current stable release: Build GitHub (current stable release): Build GitHub (current dev version):","code":"install.packages(\"toxpiR\") if (!require(remotes)) install.packages(\"remotes\") remotes::install_github(\"ToxPi/toxpiR\",                          dependencies = TRUE,                          build_vignettes = TRUE) if (!require(remotes)) install.packages(\"remotes\") remotes::install_github(\"ToxPi/toxpiR\",                         ref = dev,                         dependencies = TRUE,                          build_vignettes = TRUE)"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpModel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ToxPi Model — TxpModel-class","title":"ToxPi Model — TxpModel-class","text":"S4 class store ToxPi models","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpModel-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ToxPi Model — TxpModel-class","text":"","code":"TxpModel(txpSlices, txpWeights = NULL, txpTransFuncs = NULL)  # S4 method for TxpModel txpSlices(x)  # S4 method for TxpModel txpSlices(x) <- value  # S4 method for TxpModel txpWeights(x, adjusted = FALSE)  # S4 method for TxpModel txpWeights(x) <- value  # S4 method for TxpModel txpTransFuncs(x)  # S4 method for TxpModel txpTransFuncs(x) <- value  # S4 method for TxpModel names(x)  # S4 method for TxpModel names(x) <- value  # S4 method for TxpModel length(x)  # S4 method for TxpModel,TxpModel merge(x, y)"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpModel-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ToxPi Model — TxpModel-class","text":"txpSlices Passed txpSlices slot txpWeights Passed txpWeights slot txpTransFuncs Passed txpTransFuncs slot x, y TxpModel object value Replacement value adjusted Scalar logical, returned weights adjusted sum 1?","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpModel-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"ToxPi Model — TxpModel-class","text":"txpSlices,TxpModel-method: Return txpSlices slot txpWeights,TxpModel-method: Return txpWeights slot txpTransFuncs,TxpModel-method: Return txpTransFuncs slot names,TxpModel-method: Return slice names; shortcut names(txpSlices(x)) length,TxpModel-method: Return number slices model; shortcut length(txpSlices(x)) merge,TxpModel,TxpModel-method: Merge two TxpModel objects single model","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpModel-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ToxPi Model — TxpModel-class","text":"txpSlices TxpSliceList object txpWeights numeric vector specifying relative weight slice; NULL, defaults 1 (equal weighting) slice txpTransFuncs TxpTransFuncList object (list functions coercible TxpTransFuncList)","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpModel-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ToxPi Model — TxpModel-class","text":"","code":"## Create TxpSliceList & TxpTransFuncList objects s1 <- list(S1 = TxpSlice(\"inpt1\"), S2 = TxpSlice(\"inpt2\")) tf <- list(NULL, sqrt = function(x) sqrt(x))  ## Create TxpModel object m1 <- TxpModel(txpSlices = s1, txpWeights = 2:1, txpTransFuncs = tf) m1 #> TxpModel with 2 slices. #>   txpSlices(2): S1 S2 #>   txpWeights(2): 2 1 #>   txpTransFuncs(2): NULL sqrt  ## Access TxpModel slots txpSlices(m1) #> TxpSliceList of length 2 #> names(2): S1 S2 txpWeights(m1) #> [1] 2 1 txpWeights(m1, adjusted = TRUE) #> [1] 0.6666667 0.3333333 txpTransFuncs(m1) #>   TxpTransFuncList of length 2: NULL sqrt  ## length length(m1) ## equal to length(txpSlices(m1)) #> [1] 2 length(m1) == length(txpSlices(m1)) #> [1] TRUE  ## names names(m1) ## equal to names(txpSlices(m1)) #> [1] \"S1\" \"S2\" all(names(m1) == names(txpSlices(m1))) #> [1] TRUE  ## Replacement m2 <- m1 txpSlices(m2) <- list(S3 = TxpSlice(\"inpt3\"), S4 = TxpSlice(\"inpt4\")) m2 #> TxpModel with 2 slices. #>   txpSlices(2): S3 S4 #>   txpWeights(2): 2 1 #>   txpTransFuncs(2): NULL sqrt names(m2)[2] <- \"hello\" names(m2) #> [1] \"S3\"    \"hello\" txpTransFuncs(m2) <- NULL m2 #> TxpModel with 2 slices. #>   txpSlices(2): S3 hello #>   txpWeights(2): 2 1 #>   txpTransFuncs(2): NULL NULL txpTransFuncs(m2)[[1]] <- function(x) x^2 names(txpTransFuncs(m2))[1] <- \"sq\" m2 #> TxpModel with 2 slices. #>   txpSlices(2): S3 hello #>   txpWeights(2): 2 1 #>   txpTransFuncs(2): sq NULL  ## merge m3 <- merge(m1, m2) m3 #> TxpModel with 4 slices. #>   txpSlices(4): S1 S2 S3 hello #>   txpWeights(4): 2 1 2 1 #>   txpTransFuncs(4): NULL sqrt sq NULL"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpModelList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"List of TxpModel objects — TxpModelList-class","title":"List of TxpModel objects — TxpModelList-class","text":"Extension S4Vectors::SimpleList holds TxpModel objects.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpModelList-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of TxpModel objects — TxpModelList-class","text":"","code":"TxpModelList(...)  # S4 method for TxpModelList duplicated(x)  as.TxpModelList(x)"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpModelList-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of TxpModel objects — TxpModelList-class","text":"... TxpModel object create TxpModelList object x TxpModelList object","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpModelList-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"List of TxpModel objects — TxpModelList-class","text":"duplicated,TxpModelList-method: Returns logical vector length(x), TRUE indicates duplicate model list; see base::duplicated .TxpModelList: Coerce list TxpModel objects TxpModelList","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpModelList-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of TxpModel objects — TxpModelList-class","text":"","code":"## Create some TxpModel objects; see ?TxpModel for more details s1 <- list(S1 = TxpSlice(\"inpt1\"), S2 = TxpSlice(\"inpt2\")) tf <- list(NULL, sqrt = function(x) sqrt(x)) m1 <- TxpModel(txpSlices = s1, txpWeights = 2:1, txpTransFuncs = tf) m2 <- m1 txpSlices(m2) <- list(S3 = TxpSlice(\"inpt3\"), S4 = TxpSlice(\"inpt4\")) m3 <- merge(m1, m2)  ## Build a TxpModelList object TxpModelList(m1 = m1, m2 = m2, m3 = m3) #>   TxpModelList of length 3: m1 m2 m3  ## Note: names are printed as '' when all are NULL TxpModelList(m1, m2, m3) #>   TxpModelList of length 3: '' '' '' names(TxpModelList(m1, m2, m3)) #> NULL  ## Test for duplicates duplicated(TxpModelList(m1 = m1, m2 = m2, m3 = m3)) #> [1] FALSE FALSE FALSE duplicated(TxpModelList(m1 = m1, m2 = m1, m3 = m3)) #> [1] FALSE  TRUE FALSE  ## Coerce lists/TxpModel objects to TxpModelList as(list(m1 = m1, m2 = m2, m3 = m3), \"TxpModelList\") #>   TxpModelList of length 3: m1 m2 m3 as.TxpModelList(list(m1 = m1, m2 = m2, m3 = m3)) #>   TxpModelList of length 3: m1 m2 m3  as(m1, \"TxpModelList\") #>   TxpModelList of length 1: '' as.TxpModelList(m1) #>   TxpModelList of length 1: ''"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ToxPi Result — TxpResult-class","title":"ToxPi Result — TxpResult-class","text":"S4 class store ToxPi results","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ToxPi Result — TxpResult-class","text":"","code":"# S4 method for TxpResult txpScores(x)  # S4 method for TxpResult txpSliceScores(x, adjusted = TRUE)  # S4 method for TxpResult txpRanks(x)  # S4 method for TxpResult txpModel(x)  # S4 method for TxpResult txpIDs(x)  # S4 method for TxpResult txpIDs(x) <- value  # S4 method for TxpResult txpWeights(x, adjusted = FALSE)  # S4 method for TxpResult txpSlices(x)  # S4 method for TxpResult txpTransFuncs(x, level, simplify = FALSE)  # S4 method for TxpResult txpValueNames(x, simplify = FALSE)  # S4 method for TxpResult,logical,missing [(x, i, j, ..., drop = FALSE)  # S4 method for TxpResult,integer,missing [(x, i, j, ..., drop = FALSE)  # S4 method for TxpResult,numeric,missing [(x, i, j, ..., drop = FALSE)  # S4 method for TxpResult,character,missing [(x, i, j, ..., drop = FALSE)  # S4 method for TxpResult length(x)  # S4 method for TxpResult sort(x, decreasing = TRUE, na.last = TRUE, ...)  # S4 method for TxpResult names(x)  # S4 method for TxpResult names(x) <- value  # S4 method for TxpResult as.data.frame(   x,   row.names = NULL,   optional = FALSE,   ...,   id.name = \"id\",   score.name = \"score\",   rank.name = \"rank\",   adjusted = FALSE )"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ToxPi Result — TxpResult-class","text":"x TxpResult object adjusted Logical scalar, TRUE weights adjusted sum 1 slice scores scaled respective weight value Replacement value level c('model', 'slices'); indicates whether retrieve txpTransFuncs slot model underlying slices simplify Logical scalar, flatten txpValueNames txpTransFunc slots retrieving slice-level information Subsetting index j, drop, optional currently implemented ... Passed base::data.frame .data.frame base::sort sort decreasing, na.last Passed base::sort row.names Passed base::data.frame id.name, score.name, rank.name Character scalar; coercing base::data.frame, name txpIDs, txpScores, txpRanks columns, respectively","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"ToxPi Result — TxpResult-class","text":"txpScores,TxpResult-method: Return txpScores slot txpSliceScores,TxpResult-method: Return txpSliceScores slot; default adjusted = TRUE, .e. return slice scores adjusted weight txpRanks,TxpResult-method: Return txpRanks slot txpModel,TxpResult-method: Return txpModel slot txpIDs,TxpResult-method: Return txpIDs slot txpWeights,TxpResult-method: Return txpWeights slot model -- shortcut txpWeights(txpModel(x)); default adjusted = FALSE, .e. return unadjusted weights txpSlices,TxpResult-method: Return txpSlices slot model -- shortcut txpSlices(txpModel(x)) txpTransFuncs,TxpResult-method: Return txpTransFuncs slot model -- shortcut txpTransFuncs(txpModel(x)) txpValueNames,TxpResult-method: Return txpValueNames slot slices -- shortcut txpValueNames(txpSlices(txpModel(x))) length,TxpResult-method: Return number observations; shortcut length(txpScores(x)) sort,TxpResult-method: Sort ``TxpResult` object ranks names,TxpResult-method: Returns IDs; equal txpIDs(x) .data.frame,TxpResult-method: Coerce TxpResult base::data.frame object IDs, scores, ranks, slice scores","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ToxPi Result — TxpResult-class","text":"txpScores vector(<numeric>) model scores txpSliceScores matrix(<numeric>), sample slice matrix individual slice scores txpRanks vector(<numeric>) rank scores txpModel TxpModel object txpIDs vector(<character>) observation IDs","code":""},{"path":[]},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ToxPi Result — TxpResult-class","text":"","code":"## Load example dataset & model; see ?TxpModel for building model objects data(txp_example_input, package = \"toxpiR\") data(txp_example_model, package = \"toxpiR\")  ## Calculate scores for single model; returns TxpResult object res <- txpCalculateScores(model = txp_example_model,                            input = txp_example_input,                            id.var = \"name\")  ## Accessors txpScores(res) #>  [1] 0.8633157 0.4148452 0.3479965 0.1640443 0.4252311 0.5857161 0.0000000 #>  [8] 0.7195122 0.7719789 0.4709989  txpSliceScores(res) ## adjusted for weight, by default #>               s1          s2         s3         s4 #>  [1,] 0.25000000 0.009920635 0.37500000 0.22839506 #>  [2,] 0.03893443 0.103174603 0.22026699 0.05246914 #>  [3,] 0.07172131 0.105158730 0.17111650 0.00000000 #>  [4,] 0.02254098 0.000000000 0.02730583 0.11419753 #>  [5,] 0.10860656 0.047619048 0.11468447 0.15432099 #>  [6,] 0.05327869 0.125000000 0.28398058 0.12345679 #>  [7,] 0.00000000 0.000000000 0.00000000 0.00000000 #>  [8,] 0.19467213 0.099206349 0.23118932 0.19444444 #>  [9,] 0.21721311 0.075396825 0.22936893 0.25000000 #> [10,] 0.14549180 0.023809524 0.18750000 0.11419753 apply(txpSliceScores(res), 2, max, na.rm = TRUE) #>    s1    s2    s3    s4  #> 0.250 0.125 0.375 0.250   txpSliceScores(res, adjusted = FALSE) ## each score should have maximum of 1 #>               s1         s2         s3        s4 #>  [1,] 1.00000000 0.07936508 1.00000000 0.9135802 #>  [2,] 0.15573770 0.82539683 0.58737864 0.2098765 #>  [3,] 0.28688525 0.84126984 0.45631068 0.0000000 #>  [4,] 0.09016393 0.00000000 0.07281553 0.4567901 #>  [5,] 0.43442623 0.38095238 0.30582524 0.6172840 #>  [6,] 0.21311475 1.00000000 0.75728155 0.4938272 #>  [7,] 0.00000000 0.00000000 0.00000000 0.0000000 #>  [8,] 0.77868852 0.79365079 0.61650485 0.7777778 #>  [9,] 0.86885246 0.60317460 0.61165049 1.0000000 #> [10,] 0.58196721 0.19047619 0.50000000 0.4567901 apply(txpSliceScores(res, adjusted = FALSE), 2, max, na.rm = TRUE) #> s1 s2 s3 s4  #>  1  1  1  1   txpRanks(res) #>  [1]  1  7  8  9  6  4 10  3  2  5  txpModel(res) #> TxpModel with 4 slices. #>   txpSlices(4): s1 s2 s3 s4 #>   txpWeights(4): 2 1 3 2 #>   txpTransFuncs(4): NULL linear NULL NULL identical(txpModel(res), txp_example_model) #> [1] TRUE  txpIDs(res) #>  [1] \"chem01\" \"chem02\" \"chem03\" \"chem04\" \"chem05\" \"chem06\" \"chem07\" \"chem08\" #>  [9] \"chem09\" \"chem10\" names(res) ## identical to txpIDs(res) #>  [1] \"chem01\" \"chem02\" \"chem03\" \"chem04\" \"chem05\" \"chem06\" \"chem07\" \"chem08\" #>  [9] \"chem09\" \"chem10\" identical(txpIDs(res), names(res)) #> [1] TRUE  # Can access TxpModel slots directly txpWeights(res) #> [1] 2 1 3 2 txpWeights(res, adjusted = TRUE) #> [1] 0.250 0.125 0.375 0.250 txpSlices(res) #> TxpSliceList of length 4 #> names(4): s1 s2 s3 s4 # When retrieving transform functions, must specify level because both  # models and slices have transform functions txpTransFuncs(res, level = \"model\") #>   TxpTransFuncList of length 4: NULL linear NULL NULL  # Can access TxpSliceList slots directly txpValueNames(res) #> $s1 #> [1] \"metric1\" \"metric2\" #>  #> $s2 #> [1] \"metric3\" #>  #> $s3 #> [1] \"metric4\" \"metric5\" \"metric6\" \"metric7\" #>  #> $s4 #> [1] \"metric8\" #>  txpValueNames(res, simplify = TRUE) #>       s11       s12        s2       s31       s32       s33       s34        s4  #> \"metric1\" \"metric2\" \"metric3\" \"metric4\" \"metric5\" \"metric6\" \"metric7\" \"metric8\"  txpTransFuncs(res, level = \"slices\") #> $s1 #>   TxpTransFuncList of length 2: NULL NULL #>  #> $s2 #>   TxpTransFuncList of length 1: NULL #>  #> $s3 #>   TxpTransFuncList of length 4: linear linear linear linear #>  #> $s4 #>   TxpTransFuncList of length 1: linear #>  txpTransFuncs(res, level = \"slices\", simplify = TRUE) #>   TxpTransFuncList of length 8: NULL NULL ... linear linear  ## Subsetting res[1] #> TxpResult of length 1 #>   names(1): chem01 res[c(\"chem01\", \"chem09\")] #> TxpResult of length 2 #>   names(2): chem01 chem09 res[grepl(\"4|6\", txpIDs(res))] #> TxpResult of length 2 #>   names(2): chem04 chem06 if (FALSE) { res[c(TRUE, FALSE)] ## gets recycled with warning }  ## length -- returns number of observations length(res) #> [1] 10 length(res[1:5]) #> [1] 5  ## sort names(res) #>  [1] \"chem01\" \"chem02\" \"chem03\" \"chem04\" \"chem05\" \"chem06\" \"chem07\" \"chem08\" #>  [9] \"chem09\" \"chem10\" names(sort(res)) #>  [1] \"chem01\" \"chem09\" \"chem08\" \"chem06\" \"chem10\" \"chem05\" \"chem02\" \"chem03\" #>  [9] \"chem04\" \"chem07\"  txpScores(res) #>  [1] 0.8633157 0.4148452 0.3479965 0.1640443 0.4252311 0.5857161 0.0000000 #>  [8] 0.7195122 0.7719789 0.4709989 txpScores(sort(res)) #>  [1] 0.8633157 0.7719789 0.7195122 0.5857161 0.4709989 0.4252311 0.4148452 #>  [8] 0.3479965 0.1640443 0.0000000 txpScores(sort(res, decreasing = FALSE)) #>  [1] 0.0000000 0.1640443 0.3479965 0.4148452 0.4252311 0.4709989 0.5857161 #>  [8] 0.7195122 0.7719789 0.8633157  ## as.data.frame as.data.frame(res) #>        id     score rank         s1         s2         s3        s4 #> 1  chem01 0.8633157    1 1.00000000 0.07936508 1.00000000 0.9135802 #> 2  chem02 0.4148452    7 0.15573770 0.82539683 0.58737864 0.2098765 #> 3  chem03 0.3479965    8 0.28688525 0.84126984 0.45631068 0.0000000 #> 4  chem04 0.1640443    9 0.09016393 0.00000000 0.07281553 0.4567901 #> 5  chem05 0.4252311    6 0.43442623 0.38095238 0.30582524 0.6172840 #> 6  chem06 0.5857161    4 0.21311475 1.00000000 0.75728155 0.4938272 #> 7  chem07 0.0000000   10 0.00000000 0.00000000 0.00000000 0.0000000 #> 8  chem08 0.7195122    3 0.77868852 0.79365079 0.61650485 0.7777778 #> 9  chem09 0.7719789    2 0.86885246 0.60317460 0.61165049 1.0000000 #> 10 chem10 0.4709989    5 0.58196721 0.19047619 0.50000000 0.4567901 as.data.frame(res, id.name = \"nm\", score.name = \"scr\", rank.name = \"rnk\") #>        nm       scr rnk         s1         s2         s3        s4 #> 1  chem01 0.8633157   1 1.00000000 0.07936508 1.00000000 0.9135802 #> 2  chem02 0.4148452   7 0.15573770 0.82539683 0.58737864 0.2098765 #> 3  chem03 0.3479965   8 0.28688525 0.84126984 0.45631068 0.0000000 #> 4  chem04 0.1640443   9 0.09016393 0.00000000 0.07281553 0.4567901 #> 5  chem05 0.4252311   6 0.43442623 0.38095238 0.30582524 0.6172840 #> 6  chem06 0.5857161   4 0.21311475 1.00000000 0.75728155 0.4938272 #> 7  chem07 0.0000000  10 0.00000000 0.00000000 0.00000000 0.0000000 #> 8  chem08 0.7195122   3 0.77868852 0.79365079 0.61650485 0.7777778 #> 9  chem09 0.7719789   2 0.86885246 0.60317460 0.61165049 1.0000000 #> 10 chem10 0.4709989   5 0.58196721 0.19047619 0.50000000 0.4567901"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot TxpResult objects — TxpResult-plot","title":"Plot TxpResult objects — TxpResult-plot","text":"Plot TxpResult objects","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot TxpResult objects — TxpResult-plot","text":"","code":"# S4 method for TxpResult,missing plot(   x,   fills = NULL,   showScore = TRUE,   gp = NULL,   vp = NULL,   name = NULL,   newpage = TRUE,   ... )  # S4 method for TxpResult,numeric plot(   x,   y,   labels = NULL,   newpage = TRUE,   margins = c(4, 0, 1, 1),   name = NULL,   gp = NULL,   vp = NULL,   ... )"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot TxpResult objects — TxpResult-plot","text":"x TxpResult object fills Vector colors fill slices showScore Logical scalar, overall score printed name TRUE gp, vp, name Passed grid::frameGrob creating plotting area newpage Logical scalar, grid::grid.newpage called prior plotting TRUE ... Passed pieGridGrob plotting ToxPi pointsGrob plotting ranks y Rank vector, .e. txpRanks(x) labels Integer vector, indices x label rank plot margins Passed grid::plotViewport; affects scatterplot region margins","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot TxpResult objects — TxpResult-plot","text":"return value; called side effect (.e. drawing current graphics device.)","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot TxpResult objects — TxpResult-plot","text":"strongly recommended use specific device (e.g., grDevices::png, grDevices::pdf) creating rank plots. Using GUI device likely lead inaccurate labeling, changes device size lead inaccurate labeling. plotting built grid::grid-package, can adjusted edited . labels running device, top bottom margins can increased margins parameter.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-plot.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plot TxpResult objects — TxpResult-plot","text":"plot,TxpResult,missing-method: Plot ToxPi diagrams plot,TxpResult,numeric-method: Plot ToxPi ranks","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResult-plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot TxpResult objects — TxpResult-plot","text":"","code":"## Load example dataset & model; see ?TxpModel for building model objects data(txp_example_input, package = \"toxpiR\") data(txp_example_model, package = \"toxpiR\")  ## Calculate scores for single model; returns TxpResult object res <- txpCalculateScores(model = txp_example_model,                            input = txp_example_input,                            id.var = \"name\")  library(grid) plot(res)   plot(res, txpRanks(res))  plot(res, txpRanks(res), pch = 16, size = unit(0.75, \"char\"))   ## Will likely make inaccurate labels within a GUI, e.g. RStudio ## use png, pdf, etc. to get accurate labels if (FALSE) { tmpPdf <- tempfile() pdf(tmpPdf) plot(res, txpRanks(res), labels = c(10, 4, 2), pch = 16) dev.off() }"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResultList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"List of TxpResult objects — TxpResultList-class","title":"List of TxpResult objects — TxpResultList-class","text":"Extension S4Vectors::SimpleList holds TxpResult objects.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResultList-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of TxpResult objects — TxpResultList-class","text":"","code":"TxpResultList(...)  # S4 method for TxpResultList duplicated(x)  as.TxpResultList(x)"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResultList-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of TxpResult objects — TxpResultList-class","text":"... TxpResult object create TxpResultList object x TxpResultList object","code":""},{"path":[]},{"path":"https://toxpi.github.io/toxpiR/reference/TxpResultList-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of TxpResult objects — TxpResultList-class","text":"","code":"## Load example dataset & model; see ?TxpModel for building model objects data(txp_example_input, package = \"toxpiR\") data(txp_example_model, package = \"toxpiR\")  ## Calculate scores for list of models; returns TxpResultList object txpCalculateScores(model = TxpModelList(m1 = txp_example_model,                                          m2 = txp_example_model),                     input = txp_example_input,                     id.var = \"name\") #>   TxpResultList of length 2: m1 m2 resLst <- txpCalculateScores(model = list(m1 = txp_example_model,                                            m2 = txp_example_model),                               input = txp_example_input,                               id.var = \"name\")  ## duplicated duplicated(resLst) #> [1] FALSE  TRUE  ## Coercion as(list(resLst[[1]], resLst[[2]]), \"TxpResultList\") #>   TxpResultList of length 2: '' '' as.TxpResultList(list(res1 = resLst[[1]], res2 = resLst[[2]])) #>   TxpResultList of length 2: res1 res2  as(resLst[[1]], \"TxpResultList\") #>   TxpResultList of length 1: '' as.TxpResultList(resLst[[1]]) #>   TxpResultList of length 1: ''"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSlice-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ToxPi Slice — TxpSlice-class","title":"ToxPi Slice — TxpSlice-class","text":"S4 class store ToxPi slices","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSlice-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ToxPi Slice — TxpSlice-class","text":"","code":"TxpSlice(txpValueNames, txpTransFuncs = NULL)  # S4 method for TxpSlice txpValueNames(x)  # S4 method for TxpSlice txpValueNames(x) <- value  # S4 method for TxpSlice txpTransFuncs(x)  # S4 method for TxpSlice txpTransFuncs(x) <- value  # S4 method for TxpSlice length(x)  # S4 method for TxpSlice,TxpSlice merge(x, y)"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSlice-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ToxPi Slice — TxpSlice-class","text":"txpValueNames Passed txpValueNames slot txpTransFuncs Passed txpTransFuncs slot x, y TxpSlice object value Replacement value","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSlice-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ToxPi Slice — TxpSlice-class","text":"user supplies txpTransFuncs single function/TxpTransFunc object, given function recycled input warning.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSlice-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"ToxPi Slice — TxpSlice-class","text":"txpValueNames,TxpSlice-method: Return txpValueNames slot txpTransFuncs,TxpSlice-method: Return txpTransFuncs slot length,TxpSlice-method: Return number inputs slice; shortcut length(txpValueNames(x)) merge,TxpSlice,TxpSlice-method: Merge two TxpSlice objects single slice","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSlice-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ToxPi Slice — TxpSlice-class","text":"txpValueNames vector(<character>) specifying input columns include slice txpTransFuncs TxpTransFuncList one function per entry txpValueNames object can coerced TxpTransFuncList; NULL, transformation function applied","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSlice-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ToxPi Slice — TxpSlice-class","text":"","code":"## Create TxpSlice object  # Without transform functions TxpSlice(txpValueNames = c(\"sqrData\", \"expData\"))  #> TxpSlice with 2 inputs. #>   txpValueNames(2): sqrData expData #>   txpTransFuncs(2): NULL NULL # With transform functions TxpSlice(txpValueNames = c(\"sqrData\", \"expData\"),          txpTransFuncs = c(sq = function(x) x^2, log = function(x) log(x))) #> TxpSlice with 2 inputs. #>   txpValueNames(2): sqrData expData #>   txpTransFuncs(2): sq log  # Transformation function recycled with warning when single function given TxpSlice(txpValueNames = c(\"sqrData\", \"expData\"),           txpTransFuncs = function(x) x^2)  #> Warning: Recycling given 'txpTransFuncs' for each input. #> TxpSlice with 2 inputs. #>   txpValueNames(2): sqrData expData #>   txpTransFuncs(2): '' ''            ## Access TxpSlice slots sl <- TxpSlice(txpValueNames = c(\"sqrData\", \"expData\"),                txpTransFuncs = c(sq = function(x) x^2,                                   log = function(x) log(x))) txpValueNames(sl) #> [1] \"sqrData\" \"expData\" txpTransFuncs(sl) #>   TxpTransFuncList of length 2: sq log  ## Replacement txpValueNames(sl)[1] <- \"hello\" sl #> TxpSlice with 2 inputs. #>   txpValueNames(2): hello expData #>   txpTransFuncs(2): sq log  txpTransFuncs(sl)[[2]](exp(1)) #> [1] 1 txpTransFuncs(sl)[[2]] <- function(x) sqrt(x) txpTransFuncs(sl)[[2]](exp(1)) #> [1] 1.648721  # Note that replacing a single list element does NOT update the name sl #> TxpSlice with 2 inputs. #>   txpValueNames(2): hello expData #>   txpTransFuncs(2): sq log names(txpTransFuncs(sl))[2] <- \"sqrt\"  sl #> TxpSlice with 2 inputs. #>   txpValueNames(2): hello expData #>   txpTransFuncs(2): sq sqrt  # Replacing the whole list DOES update the names txpTransFuncs(sl) <- list(sqrt = function(x) sqrt(x),                            log = function(x) log(x)) sl #> TxpSlice with 2 inputs. #>   txpValueNames(2): hello expData #>   txpTransFuncs(2): sqrt log  ## length -- returns number of inputs length(TxpSlice(letters)) #> [1] 26  ## merge s1 <- TxpSlice(\"hello\") s2 <- TxpSlice(\"data\") merge(s1, s2) #> TxpSlice with 2 inputs. #>   txpValueNames(2): hello data #>   txpTransFuncs(2): NULL NULL  # Note, input names still must be unique if (FALSE) merge(s1, s1) ## produces error"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSliceList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"List of TxpSlice objects — TxpSliceList-class","title":"List of TxpSlice objects — TxpSliceList-class","text":"Extension S4Vectors::SimpleList requires uniquely-named elements holds TxpSlice objects.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSliceList-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of TxpSlice objects — TxpSliceList-class","text":"","code":"TxpSliceList(...)  # S4 method for TxpSliceList txpValueNames(x, simplify = FALSE)  # S4 method for TxpSliceList txpTransFuncs(x, simplify = FALSE)  # S4 method for TxpSliceList duplicated(x)  as.TxpSliceList(x)"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSliceList-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of TxpSlice objects — TxpSliceList-class","text":"... TxpSlice object create TxpSliceList object; MUST give unique names slice x TxpSliceList object simplify Scalar logical, TRUE returned list simplified vector/TxpTransFuncList object","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSliceList-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of TxpSlice objects — TxpSliceList-class","text":"Note, coercion TxpSlice TxpSliceList unique names required.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSliceList-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"List of TxpSlice objects — TxpSliceList-class","text":"txpValueNames,TxpSliceList-method: Return list txpValueNames slots contained TxpSlice objects, vector simplify = TRUE txpTransFuncs,TxpSliceList-method: Return list txpTransFuncs slots contained TxpSlice objects, TxpTransFuncList simplify = TRUE duplicated,TxpSliceList-method: Returns logical vector length(x), TRUE indicates duplicate slice list; see base::duplicated","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpSliceList-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of TxpSlice objects — TxpSliceList-class","text":"","code":"## Create TxpSlice objects s1 <- TxpSlice(\"input1\", list(linear = function(x) x)) s2 <- TxpSlice(c(\"input2\", \"input3\"),                 list(log = function(x) log(x), sqrt = function(x) sqrt(x)))  ## Create TxpSliceList sl <- TxpSliceList(s1 = s1, s2 = s2)  ## Accessors txpValueNames(sl) #> $s1 #> [1] \"input1\" #>  #> $s2 #> [1] \"input2\" \"input3\" #>  txpValueNames(sl, simplify = TRUE) #>       s1      s21      s22  #> \"input1\" \"input2\" \"input3\"   txpTransFuncs(sl) #> $s1 #>   TxpTransFuncList of length 1: linear #>  #> $s2 #>   TxpTransFuncList of length 2: log sqrt #>  txpTransFuncs(sl, simplify = TRUE) #>   TxpTransFuncList of length 3: linear log sqrt  ## Coercion as(list(s1 = TxpSlice(\"hello\"), s2 = TxpSlice(\"user\")), \"TxpSliceList\") #> TxpSliceList of length 2 #> names(2): s1 s2 as.TxpSliceList(c(s1 = TxpSlice(\"hello\"), s2 = TxpSlice(\"user\"))) #> TxpSliceList of length 2 #> names(2): s1 s2  ## Concatenation c(sl, TxpSliceList(s3 = TxpSlice(\"input4\"))) #> TxpSliceList of length 3 #> names(3): s1 s2 s3  ## Reduce TxpSliceList to single slice Reduce(merge, sl) #> TxpSlice with 3 inputs. #>   txpValueNames(3): input1 input2 input3 #>   txpTransFuncs(3): linear log sqrt"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpTransFunc-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric transformation function — TxpTransFunc-class","title":"Numeric transformation function — TxpTransFunc-class","text":"S4 class store numeric transformation functions","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpTransFunc-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric transformation function — TxpTransFunc-class","text":"","code":"TxpTransFunc(x)"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpTransFunc-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric transformation function — TxpTransFunc-class","text":"x function, see details","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpTransFunc-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Numeric transformation function — TxpTransFunc-class","text":"TxpTransFunc inherits standard R function, specifies single input numeric output length. Functions can passed directly TxpTransFuncList list functions coerced TxpTransFunc. imperfect system dealing primitive functions (e.g., base::sqrt). coerce primitives TxpTransFunc's, wrap another function cal; wrapping primitives obscures original function requires user explore function environment understand primitive called. recommend wrapping primitives separate functions make intent clear, .e.g., mysqrt <- function(x) sqrt(x).","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpTransFunc-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric transformation function — TxpTransFunc-class","text":"","code":"f1 <- function(x) \"hello\" f2 <- function(x) 3 f3 <- function(x) x + 5 if (FALSE) { t1 <- TxpTransFunc(x = f1) ## Produces error t2 <- TxpTransFunc(x = f2) ## Produces error } t3 <- TxpTransFunc(x = f3)  ## TxpTransFunc objects act as any other function body(t3) #> x + 5 formals(t3) #> $x #>  #>  t3(1:10) #>  [1]  6  7  8  9 10 11 12 13 14 15  ## Coercion from functions if (FALSE) { TxpTransFuncList(f1, f2, f3) ## Produces error because f1, f3 not valid }"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpTransFuncList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"List of TxpTransFunc objects — TxpTransFuncList-class","title":"List of TxpTransFunc objects — TxpTransFuncList-class","text":"Extension S4Vectors::SimpleList holds NULL TxpTransFunc objects.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpTransFuncList-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of TxpTransFunc objects — TxpTransFuncList-class","text":"","code":"TxpTransFuncList(...)  as.TxpTransFuncList(x)"},{"path":"https://toxpi.github.io/toxpiR/reference/TxpTransFuncList-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of TxpTransFunc objects — TxpTransFuncList-class","text":"... TxpTransFunc object function create TxpTransFuncList object x list, function, TxpTransFunc object coerce TxpTransFuncList","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpTransFuncList-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of TxpTransFunc objects — TxpTransFuncList-class","text":"... includes function objects, TxpTransFuncList attempt coerce TxpTransFunc return error elements coerced TxpTransFunc.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/TxpTransFuncList-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of TxpTransFunc objects — TxpTransFuncList-class","text":"","code":"## Create TxpTransFunc objects tf1 <- TxpTransFunc(function(x) x) tf2 <- TxpTransFunc(function(x) sqrt(x))  ## Create TxpTransFuncList  tfl <- TxpTransFuncList(linear = tf1, sqrt = tf2, cube = function(x) x^3) tfl[[3]](3) == 27 #> [1] TRUE tfl[[\"sqrt\"]](4) == 2 #> [1] TRUE  ## Concatenate c(tfl, tfl) #>   TxpTransFuncList of length 6: linear sqrt ... sqrt cube  ## names names(c(tfl, tfl)) #> [1] \"linear\" \"sqrt\"   \"cube\"   \"linear\" \"sqrt\"   \"cube\"    # note: names are printed as '' when missing; NULL is printed when list item # is NULL names(TxpTransFuncList(function(x) x, NULL)) #> NULL TxpTransFuncList(function(x) x, NULL) #>   TxpTransFuncList of length 2: '' NULL  ## coercion as(function(x) x, \"TxpTransFuncList\") #>   TxpTransFuncList of length 1: '' as.TxpTransFuncList(function(x) x) #>   TxpTransFuncList of length 1: ''  as(TxpTransFunc(function(x) x), \"TxpTransFuncList\") #>   TxpTransFuncList of length 1: '' as.TxpTransFuncList(TxpTransFunc(function(x) x)) #>   TxpTransFuncList of length 1: ''  as(list(function(x) x, sqrt = function(x) sqrt(x)), \"TxpTransFuncList\") #>   TxpTransFuncList of length 2: '' sqrt as.TxpTransFuncList(list(function(x) x, sqrt = function(x) sqrt(x))) #>   TxpTransFuncList of length 2: '' sqrt"},{"path":"https://toxpi.github.io/toxpiR/reference/boxLegendGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a filled-box legend — boxLegendGrob","title":"Create a filled-box legend — boxLegendGrob","text":"Create filled-box legend","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/boxLegendGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a filled-box legend — boxLegendGrob","text":"","code":"boxLegendGrob(labels, fills, name = NULL, vp = NULL, gp = NULL)"},{"path":"https://toxpi.github.io/toxpiR/reference/boxLegendGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a filled-box legend — boxLegendGrob","text":"labels Character, legend labels fills Colors fill slices name, vp, gp Passed grid::frameGrob","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/boxLegendGrob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a filled-box legend — boxLegendGrob","text":"yet exported. Need break creation viewports grobs done exported grobs. allow better grobEdit methods, also needs created boxLegendGrob. Also need input checks. Also, grid::legendGrob gets updated use '.fill' option function removed grid::legendGrob can used instead.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/pieGridGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Make grid of pieGrobs — pieGridGrob","title":"Make grid of pieGrobs — pieGridGrob","text":"Make grid pieGrobs","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/pieGridGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make grid of pieGrobs — pieGridGrob","text":"","code":"pieGridGrob(   radMat,   wts = NULL,   fills = NULL,   labels = NULL,   showRadSum = FALSE,   ncol = NULL,   nrow = NULL,   byrow = TRUE,   name = NULL,   gp = NULL,   vp = NULL )  grid.pieGridGrob(   radMat,   wts = NULL,   fills = NULL,   labels = NULL,   showRadSum = FALSE,   ncol = NULL,   nrow = NULL,   byrow = TRUE,   name = NULL,   gp = NULL,   vp = NULL )"},{"path":"https://toxpi.github.io/toxpiR/reference/pieGridGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make grid of pieGrobs — pieGridGrob","text":"radMat matrix(<numeric>), observations slice radii wts vector(<numeric>), relative weights slice fills Vector colors fill slices labels vector(<character>), (optional) label observation showRadSum Logical scalar, TRUE show weighted sum slices label nrow, ncol Integer scalar, number rows columns grid byrow Logical scalar, fill grid rows TRUE name, gp, vp Passed grid::gTree","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/pieGridGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make grid of pieGrobs — pieGridGrob","text":"pieGrobgrid::grob object","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/pieGridGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make grid of pieGrobs — pieGridGrob","text":"","code":"# \\donttest{ library(grid)  s <- seq(0.2, 1, by = 0.1) smat <- do.call(\"rbind\", replicate(20, s, simplify = FALSE)) grid.newpage() grid.pieGridGrob(radMat = smat)   rownames(smat) <- sprintf(\"obs%02d\", 1:20) grid.newpage() grid.pieGridGrob(radMat = smat, wts = s)  grid.newpage() grid.pieGridGrob(radMat = smat, wts = s, showRadSum = TRUE, labels = FALSE)  grid.newpage() grid.pieGridGrob(radMat = smat, labels = \"hello\")  grid.newpage() grid.pieGridGrob(radMat = smat, labels = 1:20)   ## Can edit like normal grid objects grid.newpage() grid.pieGridGrob(radMat = smat, wts = s, showRadSum = TRUE)  grid.ls() ## shows grid elements #> GRID.gTree.359 #>   GRID.frame.360 #>     GRID.cellGrob.361 #>       pie-1 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.362 #>       pie-1-radSum #>     GRID.cellGrob.363 #>       pie-1-label #>   GRID.frame.364 #>     GRID.cellGrob.365 #>       pie-2 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.366 #>       pie-2-radSum #>     GRID.cellGrob.367 #>       pie-2-label #>   GRID.frame.368 #>     GRID.cellGrob.369 #>       pie-3 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.370 #>       pie-3-radSum #>     GRID.cellGrob.371 #>       pie-3-label #>   GRID.frame.372 #>     GRID.cellGrob.373 #>       pie-4 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.374 #>       pie-4-radSum #>     GRID.cellGrob.375 #>       pie-4-label #>   GRID.frame.376 #>     GRID.cellGrob.377 #>       pie-5 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.378 #>       pie-5-radSum #>     GRID.cellGrob.379 #>       pie-5-label #>   GRID.frame.380 #>     GRID.cellGrob.381 #>       pie-6 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.382 #>       pie-6-radSum #>     GRID.cellGrob.383 #>       pie-6-label #>   GRID.frame.384 #>     GRID.cellGrob.385 #>       pie-7 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.386 #>       pie-7-radSum #>     GRID.cellGrob.387 #>       pie-7-label #>   GRID.frame.388 #>     GRID.cellGrob.389 #>       pie-8 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.390 #>       pie-8-radSum #>     GRID.cellGrob.391 #>       pie-8-label #>   GRID.frame.392 #>     GRID.cellGrob.393 #>       pie-9 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.394 #>       pie-9-radSum #>     GRID.cellGrob.395 #>       pie-9-label #>   GRID.frame.396 #>     GRID.cellGrob.397 #>       pie-10 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.398 #>       pie-10-radSum #>     GRID.cellGrob.399 #>       pie-10-label #>   GRID.frame.400 #>     GRID.cellGrob.401 #>       pie-11 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.402 #>       pie-11-radSum #>     GRID.cellGrob.403 #>       pie-11-label #>   GRID.frame.404 #>     GRID.cellGrob.405 #>       pie-12 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.406 #>       pie-12-radSum #>     GRID.cellGrob.407 #>       pie-12-label #>   GRID.frame.408 #>     GRID.cellGrob.409 #>       pie-13 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.410 #>       pie-13-radSum #>     GRID.cellGrob.411 #>       pie-13-label #>   GRID.frame.412 #>     GRID.cellGrob.413 #>       pie-14 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.414 #>       pie-14-radSum #>     GRID.cellGrob.415 #>       pie-14-label #>   GRID.frame.416 #>     GRID.cellGrob.417 #>       pie-15 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.418 #>       pie-15-radSum #>     GRID.cellGrob.419 #>       pie-15-label #>   GRID.frame.420 #>     GRID.cellGrob.421 #>       pie-16 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.422 #>       pie-16-radSum #>     GRID.cellGrob.423 #>       pie-16-label #>   GRID.frame.424 #>     GRID.cellGrob.425 #>       pie-17 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.426 #>       pie-17-radSum #>     GRID.cellGrob.427 #>       pie-17-label #>   GRID.frame.428 #>     GRID.cellGrob.429 #>       pie-18 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.430 #>       pie-18-radSum #>     GRID.cellGrob.431 #>       pie-18-label #>   GRID.frame.432 #>     GRID.cellGrob.433 #>       pie-19 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.434 #>       pie-19-radSum #>     GRID.cellGrob.435 #>       pie-19-label #>   GRID.frame.436 #>     GRID.cellGrob.437 #>       pie-20 #>         slice1 #>         slice2 #>         slice3 #>         slice4 #>         slice5 #>         slice6 #>         slice7 #>         slice8 #>         slice9 #>     GRID.cellGrob.438 #>       pie-20-radSum #>     GRID.cellGrob.439 #>       pie-20-label grid.edit(\"pie-20\", fills = 1:9)  grid.edit(\"pie-19-label\", gp = gpar(font = 2, col = \"red\"))  grid.edit(\"pie-1\", wts = rep(1, 9), rads = rep(1, 9))  for (s in sprintf(\"pie-%d-radSum\", 2:4)) {   grid.edit(s, gp = gpar(font = 2, col = \"blue\")) }    # }"},{"path":"https://toxpi.github.io/toxpiR/reference/pieGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pie grob — pieGrob","title":"Create a pie grob — pieGrob","text":"Create pie grob","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/pieGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pie grob — pieGrob","text":"","code":"pieGrob(rads, fills = NULL, wts = NULL, name = NULL, vp = NULL, gp = NULL)  grid.pieGrob(rads, fills = NULL, wts = NULL, name = NULL, vp = NULL, gp = NULL)"},{"path":"https://toxpi.github.io/toxpiR/reference/pieGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pie grob — pieGrob","text":"rads Numeric, radius values slice 0 1 fills Colors fill slices wts Numeric, relative portion slice name, vp, gp Passed grid::gTree","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/pieGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a pie grob — pieGrob","text":"pieGrobgrid::grob object","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/pieGrob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a pie grob — pieGrob","text":"default coloring can set options(\"txp.fills\").","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/pieGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a pie grob — pieGrob","text":"","code":"library(grid)  s <- seq(0.2, 1, by = 0.1) grid.newpage() grid.pieGrob(rads = s)  grid.newpage() grid.pieGrob(rads = s, wts = s)   curr_txp_fills <- options()$txp.fills options(txp.fills = 1:8) grid.newpage() grid.pieGrob(rads = s)  options(txp.fills = curr_txp_fills)  ## Can edit grid.newpage() grid.pieGrob(rads = s, name = \"myPie\")  grid.ls() ## show the grid elements #> myPie #>   slice1 #>   slice2 #>   slice3 #>   slice4 #>   slice5 #>   slice6 #>   slice7 #>   slice8 #>   slice9 grid.edit(\"myPie\", fills = 1:9, wts = 9:1)"},{"path":"https://toxpi.github.io/toxpiR/reference/toxpiR-datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"toxpiR data objects — toxpiR-datasets","title":"toxpiR data objects — toxpiR-datasets","text":"Objects included toxpiR package, loaded utils::data","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/toxpiR-datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"toxpiR data objects — toxpiR-datasets","text":"","code":"data(txp_example_input, package = \"toxpiR\")  data(txp_example_model, package = \"toxpiR\")"},{"path":"https://toxpi.github.io/toxpiR/reference/toxpiR-datasets.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"toxpiR data objects — toxpiR-datasets","text":"https://github.com/ToxPi/ToxPi-example-files","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/toxpiR-datasets.html","id":"txp-example-input","dir":"Reference","previous_headings":"","what":"txp_example_input","title":"toxpiR data objects — toxpiR-datasets","text":"Small example input data used txpCalculateScores creating TxpResult objects. base::data.frame 10 rows 9 variables name Observation names metric# Input data ToxPi models","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/toxpiR-datasets.html","id":"txp-example-model","dir":"Reference","previous_headings":"","what":"txp_example_model","title":"toxpiR data objects — toxpiR-datasets","text":"Example TxpModel object intended txp_example_data; model 4 slices.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/toxpiR-datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"toxpiR data objects — toxpiR-datasets","text":"","code":"data(txp_example_input, package = \"toxpiR\") data(txp_example_model, package = \"toxpiR\") txp_example_input #>      name metric1 metric2 metric3 metric4 metric5 metric6 metric7 metric8 #> 1  chem01      74      77      25      74      77      97      25      77 #> 2  chem02      28      20      72      28      20      68      72      20 #> 3  chem03      61       3      73      61       3      24      73       3 #> 4  chem04      NA      40      20      NA      40      22      20      40 #> 5  chem05      29      53      44      29      53       4      44      53 #> 6  chem06      12      43      83      12      43      85      83      43 #> 7  chem07      29      NA      NA      29      NA      38      NA      NA #> 8  chem08      58      66      70      58      66      NA      70      66 #> 9  chem09      51      84      58      51      84      NA      58      84 #> 10 chem10      60      40      32      60      40      38      32      40 txp_example_model #> TxpModel with 4 slices. #>   txpSlices(4): s1 s2 s3 s4 #>   txpWeights(4): 2 1 3 2 #>   txpTransFuncs(4): NULL linear NULL NULL  ## Code to create txp_example_model tf1 <- TxpTransFuncList(linear = function(x) x) sl <- TxpSliceList(s1 = TxpSlice(sprintf(\"metric%d\", 1:2)),                    s2 = TxpSlice(\"metric3\"),                    s3 = TxpSlice(sprintf(\"metric%d\", 4:7),                                   tf1[rep(\"linear\", 4)]),                    s4 = TxpSlice(\"metric8\", tf1)) tf2 <- TxpTransFuncList(NULL, linear = function(x) x, NULL, NULL) TxpModel(txpSlices = sl, txpWeights = c(2, 1, 3, 2), txpTransFuncs = tf2) #> TxpModel with 4 slices. #>   txpSlices(4): s1 s2 s3 s4 #>   txpWeights(4): 2 1 3 2 #>   txpTransFuncs(4): NULL linear NULL NULL"},{"path":"https://toxpi.github.io/toxpiR/reference/toxpiR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"toxpiR: Create ToxPi Prioritization Models — toxpiR-package","title":"toxpiR: Create ToxPi Prioritization Models — toxpiR-package","text":"Enables users build 'ToxPi' prioritization models provides functionality within grid framework plotting ToxPi graphs. 'toxpiR' allows customization 'ToxPi GUI' (<https://toxpi.org>) integration existing workflows greater ease--use, reproducibility, transparency. toxpiR package behaves nearly identically GUI; package documentation includes notes differences. vignettes download example files <https://github.com/ToxPi/ToxPi-example-files>.","code":""},{"path":[]},{"path":"https://toxpi.github.io/toxpiR/reference/toxpiR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"toxpiR: Create ToxPi Prioritization Models — toxpiR-package","text":"Maintainer: Dayne L Filer dayne.filer@gmail.com (ORCID) Authors: Dillon T Lloyd Preethi Thunga (ORCID) Skylar W Marvel David M Reif reif.david@gmail.com (ORCID)","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/txpCalculateScores.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ToxPi Scores for the given model and input data — txpCalculateScores","title":"Calculate ToxPi Scores for the given model and input data — txpCalculateScores","text":"Calculate ToxPi Scores given model input data","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/txpCalculateScores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ToxPi Scores for the given model and input data — txpCalculateScores","text":"","code":"txpCalculateScores(model, input, ...)  # S4 method for TxpModel,data.frame txpCalculateScores(   model,   input,   id.var = NULL,   rank.ties.method = c(\"average\", \"first\", \"last\", \"random\", \"max\", \"min\") )  # S4 method for TxpModelList,data.frame txpCalculateScores(   model,   input,   id.var = NULL,   rank.ties.method = c(\"average\", \"first\", \"last\", \"random\", \"max\", \"min\") )  # S4 method for list,data.frame txpCalculateScores(   model,   input,   id.var = NULL,   rank.ties.method = c(\"average\", \"first\", \"last\", \"random\", \"max\", \"min\") )"},{"path":"https://toxpi.github.io/toxpiR/reference/txpCalculateScores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ToxPi Scores for the given model and input data — txpCalculateScores","text":"model TxpModel object TxpModelList object input data.frame object containing model input data ... Included extendability; currently used id.var Character scalar, column 'input' store rank.ties.method Character scalar, passed base::rank","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/txpCalculateScores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ToxPi Scores for the given model and input data — txpCalculateScores","text":"TxpResult TxpResultList object","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/txpCalculateScores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate ToxPi Scores for the given model and input data — txpCalculateScores","text":"txpCalculateScores implemented S4 generic function methods TxpModel TxpModelList. Ranks calculated highest ToxPi score rank 1.","code":""},{"path":[]},{"path":"https://toxpi.github.io/toxpiR/reference/txpCalculateScores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ToxPi Scores for the given model and input data — txpCalculateScores","text":"","code":"## Load example dataset & model; see ?TxpModel for building model objects data(txp_example_input, package = \"toxpiR\") data(txp_example_model, package = \"toxpiR\")  ## Calculate scores for single model; returns TxpResult object res <- txpCalculateScores(model = txp_example_model,                            input = txp_example_input,                            id.var = \"name\")  ## Calculate scores for list of models; returns TxpResultList object txpCalculateScores(model = TxpModelList(m1 = txp_example_model,                                          m2 = txp_example_model),                     input = txp_example_input,                     id.var = \"name\") #>   TxpResultList of length 2: m1 m2 resLst <- txpCalculateScores(model = list(m1 = txp_example_model,                                            m2 = txp_example_model),                               input = txp_example_input,                               id.var = \"name\")"},{"path":"https://toxpi.github.io/toxpiR/reference/txpGenerics.html","id":null,"dir":"Reference","previous_headings":"","what":"toxpiR package generics — txpGenerics","title":"toxpiR package generics — txpGenerics","text":"toxpiR package generics; see class man pages associated methods","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/txpGenerics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"toxpiR package generics — txpGenerics","text":"","code":"txpValueNames(x, ...)  txpValueNames(x, ...) <- value  txpTransFuncs(x, ...)  txpTransFuncs(x, ...) <- value  txpSlices(x, ...)  txpSlices(x, ...) <- value  txpWeights(x, ...)  txpWeights(x, ...) <- value  txpScores(x, ...)  txpSliceScores(x, ...)  txpModel(x, ...)  txpIDs(x, ...)  txpIDs(x, ...) <- value  txpRanks(x, ...)"},{"path":"https://toxpi.github.io/toxpiR/reference/txpGenerics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"toxpiR package generics — txpGenerics","text":"x toxpiR S4 object ... Included extendability; currently used value Replacement value","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/txpGenerics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"toxpiR package generics — txpGenerics","text":"See specific methods details.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/txpImportGui.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data file generated by ToxPi GUI — txpImportGui","title":"Import data file generated by ToxPi GUI — txpImportGui","text":"Import data file generated ToxPi GUI","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/txpImportGui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data file generated by ToxPi GUI — txpImportGui","text":"","code":"txpImportGui(guiDataFile)"},{"path":"https://toxpi.github.io/toxpiR/reference/txpImportGui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data file generated by ToxPi GUI — txpImportGui","text":"guiDataFile Character scalar, path 'data' export ToxPi GUI","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/txpImportGui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data file generated by ToxPi GUI — txpImportGui","text":"list $model containing TxpModel object; $inputcontaining data.frame input data; $fills containing vector fill colors.","code":""},{"path":"https://toxpi.github.io/toxpiR/reference/txpImportGui.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import data file generated by ToxPi GUI — txpImportGui","text":"function takes '_data.csv' files generated GUI. See https://toxpi.org information. way toxpiR implements transformation functions, way currently use GUI 'hitcount' function.","code":""}]
